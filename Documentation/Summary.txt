Hardware used:
Raspberry Pi b+
Wemos d1 mini pro
DS18S20

Wemos d1 mini pro config:
https://arduino-esp8266.readthedocs.io/en/latest/
-install ESP8266 v3.0.2 via Boardmanager
-choose "Generic ESP8266 module"




Raspberry Pi config
sudo apt-get update
sudo apt-get update --allow-releaseinfo-change
sudo apt-get install lighttpd (webserver)
sudo apt-get -y install php7.3-common php7.3-cgi php7.3
sudo apt-get install php7.3-mysql
sudo apt-get install python-mysqldb
sudo lighty-enable-mod fastcgi-php
sudo service lighttpd force-reload

Needs to be tested on a different Raspberry Pi to avoid damage on the current test system
Running Flask on Raspberry Pi
https://singleboardbytes.com/1002/running-flask-nginx-raspberry-pi.htm

1. apt-get update
2. apt-get upgrade
3. sudo apt-get install nginx
4. sudo apt-get install python3-pip
5. sudo pip install flask
6. sudo apt-get install build-essential python-dev
7. sudo pip3 install flask uwsgi
8. uwsgi --socket 0.0.0.0:8000 --protocol=http -w fossapp:app
9. create uwsgi ini file
10. uwsgi --ini uwsgi.ini


sudo chown www-data:www-data /var/www
sudo chown www-data:www-data /var/www/html
sudo chmod 775 /var/www permission to write to this directory
sudo usermod -a -G www-data pi add “pi” user to the “www-data” group
sudo reboot

sudo chmod 755 test.php make your file executable
sudo chown www-data:www-data /var/www/html/test.php

sudo chown www-data:www-data order.csv
sudo chown www-data:www-data /var/www/html

sudo touch /var/www/html/temps.html
sudo chmod 775 /var/www/html/temps.html
sudo chown www-data:www-data /var/www/html/temps.html

chmod 755 /home/pi/temperatures.py, then check that it works (once you have some data in /var/www/html/order.csv )…

sudo python3 -m pip install mysqlclient
sudo pip3 install mysql-connector

python3 /home/pi/temperatures.py

crontab -e
* * * * * /usr/bin/python /home/pi/temperatures.py

IMPORTANT LOGFILES
##########################
cat /var/log/lighttpd/error.log -> PHP logging errors
cat /var/log/syslog | grep cron
tail /var/log/cron.log


Install MySQL on Raspberry Pi 
https://pimylifeup.com/raspberry-pi-mysql/
sudo apt install mariadb-server

CREATE DATABASE SENSORS;

CREATE TABLE metrics(
id int(50) not null auto_increment primary key,
location VARCHAR(255),
temp DECIMAL(4,2),
datum char(8),
time char(8));

BACKUP DATABASE
Create a bash script to get all databases and only backup the necessary one.
A cron job will run the script once a day and keep the data for 7 days.